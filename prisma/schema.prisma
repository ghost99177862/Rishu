generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  user_id     Int       @id @default(autoincrement())
  email       String    @unique
  ghost_id    String    @unique
  is_admin    Boolean   @default(false)
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt

  posts       Post[]
  comments    Comment[]
  validations Validation[]
  adminChats  AdminChat[]

  @@index([ghost_id])
}

model College {
  college_id      Int       @id @default(autoincrement())
  name            String    @unique
  type            String?
  established_year Int?
  location        String?
  tags            String[]  @default([])
  courses         String[]  @default([])
  facilities      String[]  @default([])
  approved        Boolean   @default(true)
  created_at      DateTime  @default(now())

  posts           Post[]

  @@index([name])
}

model PendingCollege {
  pending_id   Int      @id @default(autoincrement())
  name         String
  location     String?
  submitted_by Int
  status       String   @default("PENDING")
  created_at   DateTime @default(now())

  user User @relation(fields: [submitted_by], references: [user_id])
}

model Post {
  post_id      Int         @id @default(autoincrement())
  user_id      Int
  college_id   Int
  type         String
  title        String?
  content      String
  image_url    String?
  topic_tag    String?
  created_at   DateTime    @default(now())
  updated_at   DateTime    @updatedAt
  is_deleted   Boolean     @default(false)
  valid_count  Int         @default(0)
  invalid_count Int        @default(0)

  user      User     @relation(fields: [user_id], references: [user_id])
  college   College  @relation(fields: [college_id], references: [college_id])
  comments  Comment[]
  votes     Validation[]

  @@index([college_id, created_at])
  @@index([created_at])
}

model Comment {
  comment_id Int      @id @default(autoincrement())
  post_id    Int
  user_id    Int
  content    String
  created_at DateTime @default(now())

  user User @relation(fields: [user_id], references: [user_id])
  post Post @relation(fields: [post_id], references: [post_id])
}

model Validation {
  validation_id Int      @id @default(autoincrement())
  post_id       Int
  user_id       Int
  vote          Boolean
  created_at    DateTime @default(now())

  user User @relation(fields: [user_id], references: [user_id])
  post Post @relation(fields: [post_id], references: [post_id])

  @@unique([post_id, user_id])
}

model AdminChat {
  chat_id    Int      @id @default(autoincrement())
  user_id    Int
  message    String
  sender     String
  created_at DateTime @default(now())

  user User @relation(fields: [user_id], references: [user_id])
}
  